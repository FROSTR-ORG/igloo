name: Build and Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Extract version
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> "$GITHUB_OUTPUT"

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          name: Release ${{ github.ref }}
          draft: true
          prerelease: false

  build-linux:
    name: Build Linux
    needs: release
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      ELECTRON_BUILDER_PUBLISH: 'never'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build Linux
        run: npm run dist:linux
        
      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-artifacts
          path: release/

  build-macos:
    name: Build macOS
    needs: release
    runs-on: macos-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      ELECTRON_BUILDER_PUBLISH: 'never'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build macOS
        run: npm run dist:mac
        
      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-artifacts
          path: release/

  build-windows:
    name: Build Windows
    needs: release
    runs-on: windows-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      ELECTRON_BUILDER_PUBLISH: 'never'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build Windows
        run: npm run dist:win
        
      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifacts
          path: release/

  publish:
    name: Publish Release
    needs: [release, build-linux, build-macos, build-windows]
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts
      
      - name: Prepare release files
        run: |
          mkdir -p release
          echo "=== Available artifacts ==="
          find all-artifacts -type f -exec ls -l {} \;
          
          echo "=== Copying Windows files ==="
          find all-artifacts/windows-artifacts -type f -name "*.exe" -exec ls -l {} \;
          cp all-artifacts/windows-artifacts/*Setup*.exe release/ || echo "No Windows installer found"
          cp all-artifacts/windows-artifacts/Igloo-*.exe release/ || echo "No Windows portable found"
          
          echo "=== Copying macOS files ==="
          find all-artifacts/macos-artifacts -type f \( -name "*.dmg" -o -name "*.zip" \) -exec ls -l {} \;
          cp all-artifacts/macos-artifacts/*.dmg release/ || echo "No macOS DMG found"
          cp all-artifacts/macos-artifacts/*.zip release/ || echo "No macOS ZIP found"
          
          echo "=== Copying Linux files ==="
          find all-artifacts/linux-artifacts -type f \( -name "*.AppImage" -o -name "*.deb" \) -exec ls -l {} \;
          cp all-artifacts/linux-artifacts/*.AppImage release/ || echo "No Linux AppImage found"
          cp all-artifacts/linux-artifacts/*.deb release/ || echo "No Linux DEB found"
          
          echo "=== Removing unnecessary files ==="
          rm -f release/*.blockmap
          rm -f release/*-mac.zip.blockmap
          rm -f release/*.dmg.blockmap
          
          echo "=== Final release files ==="
          ls -la release/
      
      - name: Upload assets to release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            release/*.exe
            release/*.dmg
            release/*.zip
            release/*.AppImage
            release/*.deb
          tag_name: ${{ github.ref }}
          draft: false
          prerelease: false
          fail_on_unmatched_files: false
          body: |
            # Igloo v${{ needs.release.outputs.version }}
            
            ## Downloads
            
            Choose the appropriate file for your platform:
            
            - **Windows**:
              - `Igloo-Setup-${{ needs.release.outputs.version }}.exe` - Installer
              - `Igloo-${{ needs.release.outputs.version }}-portable.exe` - Portable
            
            - **macOS**:
              - `Igloo-${{ needs.release.outputs.version }}-x64.dmg` - Disk Image
              - `Igloo-${{ needs.release.outputs.version }}-x64.zip` - ZIP Archive
            
            - **Linux**:
              - `igloo-${{ needs.release.outputs.version }}.AppImage` - AppImage
              - `igloo_${{ needs.release.outputs.version }}_amd64.deb` - Debian Package
            
            ## Verification
            
            All releases are signed with GPG. The developer's public key can be found in the repository under `keys/igloo-signing-key.asc`.
            
            For detailed verification instructions, see [VERIFICATION.md](https://github.com/${{ github.repository }}/blob/main/VERIFICATION.md) 